// Generated by CoffeeScript 1.10.0
var Event, EventType, Obj, ObjType, buffer, eventObj, eventString, events, explain, fcb, fs, getMaxWidth, getSpaces, maxWidth, newCodeBlock, newNumber, newString, operators, parse, resetParser, spaces,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

operators = {
  'o': "Pop the stack and output",
  'p': "Pop the stack and print with new line"
};

ObjType = {
  Number: 0,
  String: 1,
  CodeBlock: 2,
  Array: 3
};

Obj = (function() {
  function Obj(type, string1, num, array) {
    this.type = type;
    this.string = string1;
    this.num = num;
    this.array = array;
  }

  Obj.type = ObjType.Number;

  Obj.string = "";

  Obj.num = "";

  Obj.array = [];

  return Obj;

})();

newString = function(string) {
  return new Obj(ObjType.String, string, "", []);
};

newNumber = function(n) {
  return new Obj(ObjType.Number, "", n, []);
};

newCodeBlock = function(string) {
  return new Obj(ObjType.CodeBlock, string, "", []);
};

EventType = {
  ObjectEvent: 0,
  StringEvent: 1
};

Event = (function() {
  function Event(type, string1, c1, object) {
    this.type = type;
    this.string = string1;
    this.c = c1;
    this.object = object;
  }

  return Event;

})();

eventString = function(c, s) {
  return new Event(EventType.StringEvent, s, c, 0);
};

eventObj = function(o) {
  return new Event(EventType.ObjectEvent, "", '', o);
};

events = [];

fcb = false;

fs = false;

buffer = "";

resetParser = function() {
  events = [];
  fcb = false;
  fs = false;
  return buffer = "";
};


/*
  Parses O code into AST
 */

parse = function(code) {
  var c, i, k, ref;
  resetParser();
  for (i = k = 0, ref = code.length - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
    c = code.charAt(i);
    if (fcb && !fs) {
      if (c === "}") {
        fcb = false;
        events.push(eventObj(newCodeBlock(buffer)));
        buffer = "";
        continue;
      }
      buffer += c;
    } else if (fs && !fcb) {
      if (c === "\"") {
        fs = false;
        events.push(eventObj(newString(buffer)));
        buffer = "";
        continue;
      }
      buffer += c;
    } else if (c.match(/[1-9A-F]/)) {
      events.push(eventObj(newNumber(c)));
    } else if (c === "{") {
      fcb = true;
    } else if (c === "\"") {
      fs = true;
    } else if (c === "J" || c === "K") {
      events.push(eventString(c, "Assign to variable " + c));
    } else if (indexOf.call(operators, c) >= 0) {
      events.push(eventString(c, operators[c] + "\n"));
    }
  }
  return explain(events);
};

maxWidth = 0;

spaces = 1;

getMaxWidth = function() {
  return maxWidth;
};

getSpaces = function(i) {
  var j, s;
  s = "";
  j = 0;
  while (j < i) {
    s += " ";
    j++;
  }
  return s;
};

explain = function(events) {
  var e, event, g, k, len, s;
  maxWidth = 0;
  spaces = 1;
  e = "";
  for (k = 0, len = events.length; k < len; k++) {
    event = events[k];
    if (event.type === EventType.ObjectEvent) {
      if (event.object.type === ObjType.Number) {
        g = event.object.num.length;
        s = event.object.num + getSpaces(spaces - g) + " Push " + event.object.num + " to the stack\n";
        if (maxWidth < s.length) {
          maxWidth = s.length;
        }
        e += s;
      } else if (event.object.type === ObjType.String) {
        g = event.object.string.length + 2;
        if (spaces < g) {
          spaces = g;
        }
        s = "\"" + event.object.string + "\"" + getSpaces(spaces - g) + " Push string to the stack\n";
        if (maxWidth < s.length) {
          maxWidth = s.length;
        }
        e += s;
      } else if (event.object.type === ObjType.CodeBlock) {
        g = event.object.string.length + 2;
        if (spaces < g) {
          spaces = g;
        }
        s = "{" + event.object.string + "}" + getSpaces(spaces - g) + " Push CodeBlock to the stack\n";
        if (maxWidth < s.length) {
          maxWidth = s.length;
        }
        e += s;
      }
    } else if (event.type === EventType.StringEvent) {
      s = event.c + getSpaces(spaces) + event.string;
      g = s.length;
      if (maxWidth < g) {
        maxWidth = g;
      }
      e += s + "\n";
    }
  }
  return e;
};
