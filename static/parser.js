// Generated by CoffeeScript 1.10.0
var Event, EventType, Obj, ObjType, beforeSpaces, buffer, cbi, eventObj, eventString, events, explain, fc, fcb, fs, getMaxWidth, getSpaces, maxWidth, newChar, newCodeBlock, newNumber, newString, parse, resetParser;

ObjType = {
  Number: 0,
  String: 1,
  CodeBlock: 2,
  Array: 3,
  DoLoop: 4,
  If: 5,
  WhileLoop: 6,
  Char: 7
};

Obj = (function() {
  function Obj(type, string1, num, array) {
    this.type = type;
    this.string = string1;
    this.num = num;
    this.array = array;
  }

  Obj.type = ObjType.Number;

  Obj.string = "";

  Obj.num = "";

  Obj.array = [];

  return Obj;

})();

newString = function(string) {
  return new Obj(ObjType.String, string, "", []);
};

newNumber = function(n) {
  return new Obj(ObjType.Number, "", n, []);
};

newCodeBlock = function(string) {
  return new Obj(ObjType.CodeBlock, string, "", []);
};

newChar = function(c) {
  return new Obj(ObjType.Char, c, "", []);
};

EventType = {
  ObjectEvent: 0,
  StringEvent: 1
};

Event = (function() {
  function Event(type, string1, c1, object) {
    this.type = type;
    this.string = string1;
    this.c = c1;
    this.object = object;
  }

  return Event;

})();

eventString = function(c, s) {
  return new Event(EventType.StringEvent, s, c, 0);
};

eventObj = function(o) {
  return new Event(EventType.ObjectEvent, "", '', o);
};

events = [];

fcb = false;

fs = false;

fc = false;

buffer = "";

cbi = 0;

resetParser = function() {
  events = [];
  fcb = false;
  fs = false;
  return buffer = "";
};

parse = function(code) {
  var c, i, k, ref;
  if (code === "") {
    return "";
  }
  resetParser();
  for (i = k = 0, ref = code.length - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
    c = code.charAt(i);
    if (fc && !fs && !fcb) {
      fc = false;
      events.push(eventObj(newChar(c)));
    }
    if (fcb && !fs) {
      if (c === "{") {
        cbi++;
      }
      if (c === "}" && cbi === 0) {
        fcb = false;
        events.push(eventObj(newCodeBlock(buffer)));
        buffer = "";
        continue;
      }
      if (c === "}") {
        cbi--;
      }
      buffer += c;
    } else if (fs && !fcb) {
      if (c === "\"") {
        fs = false;
        events.push(eventObj(newString(buffer)));
        buffer = "";
        continue;
      }
      buffer += c;
    } else if (c.match(/[1-9A-F]/)) {
      events.push(eventObj(newNumber(c)));
    } else if (c === "{") {
      fcb = true;
    } else if (c === "\"") {
      fs = true;
    } else if (c === "'") {
      fc = true;
    } else if (c === "J" || c === "K") {
      events.push(eventString(c, "Assign to variable " + c));
    } else if (c === "d" && !fcb) {
      if (events[events.length - 1].object.type === ObjType.CodeBlock) {
        events[events.length - 1].object.type = ObjType.DoLoop;
      }
    } else if (c === "?" && !fcb) {
      if (events[events.length - 1].object.type === ObjType.CodeBlock) {
        events[events.length - 1].object.type = ObjType.If;
      }
    } else if (c === "w" && !fcb) {
      if (events[events.length - 1].object.type === ObjType.CodeBlock) {
        events[events.length - 1].object.type = ObjType.WhileLoop;
      }
    } else if (explanations[c] !== void 0) {
      events.push(eventString(c, explanations[c]));
    }
  }
  return explain(events);
};

maxWidth = 0;

beforeSpaces = 0;

getMaxWidth = function() {
  return maxWidth;
};

getSpaces = function(i) {
  var j, s;
  if (i < 0) {
    "";
  }
  s = "";
  j = 0;
  while (j < i) {
    s += " ";
    j++;
  }
  return s;
};

explain = function(events) {
  var e, event, g, k, l, len, len1, maxSpaces, s;
  maxWidth = 0;
  beforeSpaces = 0;
  maxSpaces = 0;
  e = "";
  for (k = 0, len = events.length; k < len; k++) {
    event = events[k];
    if (event.type === EventType.ObjectEvent) {
      if (event.object.type === ObjType.Number) {
        maxSpaces += event.object.num.length;
      }
      if (event.object.type === ObjType.String) {
        maxSpaces += event.object.string.length + 2;
      }
      if (event.object.type === ObjType.Char) {
        maxSpaces += event.object.string.length + 1;
      }
      if (event.object.type === ObjType.CodeBlock) {
        maxSpaces += event.object.string.length + 2;
      }
      if (event.object.type === ObjType.DoLoop) {
        maxSpaces += event.object.string.length + 3;
      }
      if (event.object.type === ObjType.If) {
        maxSpaces += event.object.string.length + 3;
      }
      if (event.object.type === ObjType.WhileLoop) {
        maxSpaces += event.object.string.length + 3;
      }
    } else if (event.type === EventType.StringEvent) {
      maxSpaces += 1;
    }
  }
  for (l = 0, len1 = events.length; l < len1; l++) {
    event = events[l];
    if (event.type === EventType.ObjectEvent) {
      if (event.object.type === ObjType.Number) {
        g = event.object.num.length;
        s = getSpaces(beforeSpaces) + event.object.num + getSpaces(maxSpaces - beforeSpaces) + " Push " + event.object.num + " to the stack\n";
        if (maxWidth < s.length) {
          maxWidth = s.length;
        }
        beforeSpaces += g;
        e += s;
      } else if (event.object.type === ObjType.String) {
        g = event.object.string.length + 2;
        s = getSpaces(beforeSpaces) + "\"" + event.object.string + "\"" + getSpaces(maxSpaces - beforeSpaces - g + 1) + " Push string to the stack\n";
        if (maxWidth < s.length) {
          maxWidth = s.length;
        }
        beforeSpaces += g;
        e += s;
      } else if (event.object.type === ObjType.Char) {
        g = event.object.string.length + 1;
        s = getSpaces(beforeSpaces) + "'" + event.object.string + getSpaces(maxSpaces - beforeSpaces - g, +2) + "  Push character to the stack\n";
        console.log(s.length);
        if (maxWidth < s.length) {
          maxWidth = s.length;
        }
        beforeSpaces += g;
        e += s;
      } else if (event.object.type === ObjType.CodeBlock) {
        g = event.object.string.length + 2;
        s = getSpaces(beforeSpaces) + "{" + event.object.string + "}" + getSpaces(maxSpaces - beforeSpaces - g + 1) + " Push CodeBlock to the stack\n";
        if (maxWidth < s.length) {
          maxWidth = s.length;
        }
        beforeSpaces += g;
        e += s;
      } else if (event.object.type === ObjType.DoLoop) {
        g = event.object.string.length + 3;
        s = getSpaces(beforeSpaces) + "{" + event.object.string + "}d" + getSpaces(maxSpaces - beforeSpaces - g + 1) + " Run block\n";
        if (maxWidth < s.length) {
          maxWidth = s.length;
        }
        beforeSpaces += g;
        e += s;
      } else if (event.object.type === ObjType.If) {
        g = event.object.string.length + 3;
        s = getSpaces(beforeSpaces) + "{" + event.object.string + "}?" + getSpaces(maxSpaces - beforeSpaces - g + 1) + " If block\n";
        if (maxWidth < s.length) {
          maxWidth = s.length;
        }
        beforeSpaces += g;
        e += s;
      } else if (event.object.type === ObjType.WhileLoop) {
        g = event.object.string.length + 3;
        s = getSpaces(beforeSpaces) + "{" + event.object.string + "}w" + getSpaces(maxSpaces - beforeSpaces - g + 1) + " While the top of the stack is true, run this block\n";
        if (maxWidth < s.length) {
          maxWidth = s.length;
        }
        beforeSpaces += g;
        e += s;
      }
    } else if (event.type === EventType.StringEvent) {
      s = getSpaces(beforeSpaces) + event.c + getSpaces(maxSpaces - beforeSpaces + 1) + event.string;
      g = s.length;
      if (maxWidth < g) {
        maxWidth = g;
      }
      beforeSpaces += 1;
      e += s + "\n";
    }
  }
  return e;
};
